******************************
Call a function between scripts (both scripts have to be included to GameObjects).

using UnityEngine;
public class MainClass : MonoBehaviour 
{
	public static MainClass Instance;
	private string caption = "OK";
	
	void Start () 
	{
		Instance = this;
	}
	
	public void ShowMessage () 
	{
		Debug.Log(caption);
	}
}

using UnityEngine;
public class Execute : MonoBehaviour 
{
	void Update () 
	{
		if (Input.GetKeyDown("space"))
		{
			MainClass.Instance.ShowMessage();
		}
	}
}

******************************
Call a function between scripts (both scripts have to be included to GameObjects).

using UnityEngine;
public class MainClass : MonoBehaviour 
{
	private string caption = "OK";
	
	public void ShowMessage () 
	{
		Debug.Log(caption);
	}
}

using UnityEngine;
public class Execute : MonoBehaviour 
{
	public GameObject Core;
	
	void Update () 
	{
		if (Input.GetKeyDown("space"))
		{
			Core.GetComponent<MainClass>().ShowMessage();
		}
	}
}

******************************
Passing function as argument.

using UnityEngine;
public class delegates : MonoBehaviour 
{

	delegate void DelegateFunction();

	void WaitForSeconds(float S, DelegateFunction F)
	{
		if (Time.time>=S) F();
	}

	void Compute()
	{
		float x = 1.23f;
		for (int i=0;i<100000;i++)
		{
			x = Mathf.Sin(x) * Mathf.Sqrt(x);
		}
	}
	
	void Update () 
	{
		 WaitForSeconds(3, Compute);		
	}
}

******************************
Execute script in editor mode (call function by pressing button)

using UnityEngine;
public class PrintMessage : MonoBehaviour 
{
	public void PrintText()
	{
		Debug.Log("Hello World !");
	}
}

//Put script in Editor directory.
using UnityEngine;
using UnityEditor;
[CustomEditor(typeof(PrintMessage))]
public class PrintMessageEditor : Editor
{
	public override void OnInspectorGUI()
	{
		DrawDefaultInspector();    
		PrintMessage PM = (PrintMessage)target;
		if(GUILayout.Button("Print")) PM.PrintText();
	}
}

******************************
Transform hierarchy helper functions

void DisableChild (GameObject parent, string caption)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.SetActive(false);   
	}
}
	
void ReplaceMesh (GameObject parent, string caption, Mesh input)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.GetComponent<MeshFilter>().mesh = input;   
	}
}

void ReplaceMaterial (GameObject parent, string caption, Material input)
{
	Transform[] table = parent.GetComponentsInChildren<Transform>();
	for (int i=0;i<table.Length;i++)
	{
		if (table[i].name.Contains(caption)) table[i].gameObject.GetComponent<Renderer>().material = input;   
	}
}

******************************
Create a prefab.

using UnityEngine;
using UnityEditor;
public class MakePrefab : EditorWindow
{
	[MenuItem("Prefab/Make Prefab")]
	static void MakePrefabNow()
	{
		foreach (GameObject source in Selection.gameObjects)	
		{
			string path = "Assets/" + source.name + ".prefab";
			Object prefab = PrefabUtility.CreatePrefab(path, source);
			PrefabUtility.ReplacePrefab(source, prefab, ReplacePrefabOptions.ConnectToPrefab);			
		}
	}
}

******************************
Move object in the direction of camera.

using UnityEngine;
public class CameraDirection : MonoBehaviour 
{
	public Camera MC;
	public GameObject T;
	public float factor = 2.0f;
	
	void Update () 
	{
		if (Input.GetKey(KeyCode.I)) T.transform.position += MC.transform.forward * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.K)) T.transform.position -= MC.transform.forward * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.L)) T.transform.position += MC.transform.right * factor * Time.deltaTime;
		if (Input.GetKey(KeyCode.J)) T.transform.position -= MC.transform.right * factor * Time.deltaTime;
	}
}

******************************
Create bigger array from smaller ones.

int[,] MakeArray (int[,] A, int[,] B, int[,] C, int[,] D)
{
	int[,] E = new int[A.GetLength(0)*2,A.GetLength(1)*2];
	System.Array.Copy(A, 0, E, 0, A.Length);
	System.Array.Copy(B, 0, E, A.Length, B.Length);
	System.Array.Copy(C, 0, E, A.Length+B.Length, C.Length);
	System.Array.Copy(D, 0, E, A.Length+B.Length+C.Length, D.Length);
	return E;
}

Generic version:

T[] MakeArray<T>(params T[][] arrays)
{
	int size = 0;
	for (int i = 0; i < arrays.Length; i++) size += arrays[i].Length;
	T[] array = new T[size];
	int index = 0;
	for (int x = 0; x < arrays.Length; x++)
	{
		arrays[x].CopyTo(array, index);
		index += arrays[x].Length;
	}
	return array;
}

******************************

// Function returns an array of all active loaded terrains and
// sorts them with their original hierarchy position.
Terrain[] LoadAndSortTerrains()
{
	Terrain[] foundObjects = FindObjectsOfType<Terrain>();
	Terrain[] sortedObjects = new Terrain[foundObjects.Length];
	for (int i=0; i<foundObjects.Length; i++)
	{
		int index = foundObjects[i].transform.GetSiblingIndex();
		sortedObjects[index] = foundObjects[i];
	}
	return sortedObjects;
}

******************************

// Function returns an array of all active loaded terrains with certain layer and sorts them with their original hierarchy position.
Terrain[] LoadAndSortTerrainsWithLayer(string name)
{
	Terrain[] foundObjects = FindObjectsOfType<Terrain>();
	List<Terrain> proceededObjects = new List<Terrain>();
	for (int i=0; i<foundObjects.Length; i++)
	{
		if (foundObjects[i].gameObject.layer == LayerMask.NameToLayer(name))
		{
			proceededObjects.Add(foundObjects[i]);
		}
	}
	Terrain[] sortedObjects = new Terrain[proceededObjects.Count];
	for (int j=0; j<proceededObjects.Count; j++)
	{
		int index = proceededObjects[j].transform.GetSiblingIndex();
		sortedObjects[index] = proceededObjects[j];
	}
	return sortedObjects;
}

******************************

// Function converts trees from terrain component into standalone gameobjects.
GameObject[] ConvertTreesToObjects(Terrain[] terrains, bool clear = true)
{
	List<GameObject> trees = new List<GameObject>();
	GameObject parent = new GameObject();
	parent.name = "Trees";
	for (int i=0; i<terrains.Length; i++)
	{
		TerrainData data = terrains[i].terrainData;   
		TreePrototype[] prototypes = data.treePrototypes;
		foreach (TreeInstance instance in data.treeInstances)
		{
			Vector3 position = Vector3.Scale(instance.position, data.size) + terrains[i].transform.position;
			GameObject tree = Instantiate(prototypes[instance.prototypeIndex].prefab, position, Quaternion.identity);
			tree.transform.localScale = Vector3.Scale(tree.transform.localScale, new Vector3(instance.widthScale, instance.heightScale, instance.widthScale));
			tree.transform.rotation = Quaternion.AngleAxis(instance.rotation * Mathf.Rad2Deg, Vector3.up);
			tree.transform.parent = parent.transform;
			trees.Add(tree);
		}
		if (clear) data.treeInstances = new TreeInstance[0];
	}
	return trees.ToArray();
}

******************************

string GetHierarchyPath (GameObject src) 
{
	string name = src.name;
	while (src.transform.parent != null) 
	{
		src = src.transform.parent.gameObject;
		name = src.name + "/" + name;
	}
	return name;
}

******************************

T ConvertStringToEnum<T> (string chars)
{
	return (T)System.Enum.Parse(typeof(T), chars, true); 
}

******************************

// Extract substring between two borders, example: 
// Substring ("int[Element]", "[", "]") = Element
string Substring (string src, string start, string end)
{
	if (!src.Contains(start) || !src.Contains(end)) return null;
	int x = src.IndexOf(start) + start.Length;
	int y = src.LastIndexOf(end);
	return src.Substring(x, y - x);          
}

******************************

// Copy field values between various classes (using System.Reflection)
void FieldsCopy(Component source, Component destination)
{
	FieldInfo[] infos = source.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public);
	for (int i = 0; i < infos.Length; i++)
	{
		try
		{
			destination.GetType().GetField(infos[i].Name).SetValue(destination, infos[i].GetValue(source));
		}
		catch (Exception e)
		{
			UnityEngine.Debug.LogError(e);
		}
	}
}

******************************

void AddTag(string tag)
{
	UnityEngine.Object[] assets = AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset");
	if ((assets != null) && (assets.Length > 0))
	{
		SerializedObject serializedObject = new SerializedObject(assets[0]);
		SerializedProperty serializedProperty = serializedObject.FindProperty("tags");
		for (int i = 0; i < serializedProperty.arraySize; ++i)
		{
			if (serializedProperty.GetArrayElementAtIndex(i).stringValue == tag) return; // Tag already present, nothing to do.
		}
		serializedProperty.InsertArrayElementAtIndex(0);
		serializedProperty.GetArrayElementAtIndex(0).stringValue = tag;
		serializedObject.ApplyModifiedProperties();
		serializedObject.Update();
	}
}

void AddLayer(string layer, int index)
{
	UnityEngine.Object[] assets = AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset");
	if ((assets != null) && (assets.Length > 0))
	{
		SerializedObject serializedObject = new SerializedObject(assets[0]);
		SerializedProperty serializedProperty = serializedObject.FindProperty("layers");
		for (int i = 0; i < serializedProperty.arraySize; ++i)
		{
			if (serializedProperty.GetArrayElementAtIndex(i).stringValue == layer) return; // Layer already present, nothing to do.
		}
		serializedProperty.InsertArrayElementAtIndex(index);
		serializedProperty.GetArrayElementAtIndex(index).stringValue = layer;
		serializedObject.ApplyModifiedProperties();
		serializedObject.Update();
	}
}

******************************

Clear render texture color buffer:

void Clear (RenderTexture rt)
{
	RenderTexture currentActiveRT = RenderTexture.active;
	RenderTexture.active = rt;
	GL.Clear(false, true, new Color(0.0f, 0.0f, 0.0f, 1.0f));
	RenderTexture.active = currentActiveRT;
}

******************************

C# show private fields. Example class with private Texture2D:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GenerateTexture : MonoBehaviour
{
	private Texture2D _Sphere;

	void Start()
	{
		_Sphere = new Texture2D(256, 256);
		for (int y = 0; y < _Sphere.height; y++)
		{
			for (int x = 0; x < _Sphere.width; x++)
			{
				Vector2 uv = new Vector2(x / (float) _Sphere.width, y / (float) _Sphere.height);
				float s = new Vector2(uv.x - 0.5f, uv.y - 0.5f).magnitude - 0.1f;
				float c = System.Convert.ToSingle(0.0f >= s);
				Color color = new Color(c, 0.0f, 0.0f, 1.0f);
				_Sphere.SetPixel(x, y, color);
			}
		}
		_Sphere.Apply();
	}
}

Access to this texture from external script:

using UnityEngine;
using System.Reflection; 
using System;

public class Tools : MonoBehaviour
{
	System.Object ReadValue(string className, string assemblyName, string fieldName)
	{
		Type type = Type.GetType(className + "," + assemblyName);
		Component component = FindObjectOfType(type) as Component; 
		BindingFlags flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static;
		FieldInfo fieldInfo = component.GetType().GetField(fieldName, flags); 
		System.Object result = fieldInfo.GetValue(component);
		return result;
	}

	Texture2D _Texture;

	void Start()
	{
		_Texture = (Texture2D)ReadValue("GenerateTexture", "Assembly-CSharp", "_Sphere");
	}

	void OnGUI()
	{
		GUI.DrawTexture(new Rect(0, 0, 512, 512), _Texture, ScaleMode.ScaleToFit, true, 1.0F);
	}
}

******************************

Example with camera rendering on demand (camera renders in every second, not every frame, to save performance in specific scenario):

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CustomCamera : MonoBehaviour
{
	public Camera SecondCamera;
	float _Timer = 0.0f;
	RenderTexture _RenderTexture;

	void Start()
	{
		_RenderTexture = new RenderTexture(256, 256, 16, RenderTextureFormat.ARGB32);
		SecondCamera.targetTexture = _RenderTexture;
		SecondCamera.enabled = false;
		this.GetComponent<Renderer>().material.mainTexture = _RenderTexture;
	}

	void Update()
	{
		_Timer += Time.deltaTime;
		if (_Timer > 1.0f)
		{
			_Timer = 0.0f;
			SecondCamera.Render();
		}
	}

	void OnDestroy()
	{
		_RenderTexture.Release();
	}
}

******************************

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

public class MeshCombine : MonoBehaviour
{
	public GameObject Source;

	void Start()
	{
		StartCoroutine("Execute");
	}

	IEnumerator Execute()
	{
		if (Source == null) yield break;
		GameObject destination = new GameObject();
		destination.name = "CombinedMesh";
		MeshFilter filter = destination.AddComponent<MeshFilter>();
		MeshRenderer renderer = destination.AddComponent<MeshRenderer>();
		Mesh mesh = new Mesh();
		mesh.indexFormat = IndexFormat.UInt32;
		mesh.name = "CombinedMesh";
		List<Vector3> vertices = new List<Vector3>();
		List<int> triangles = new List<int>();
		MeshFilter[] filters = Source.GetComponentsInChildren<MeshFilter>();
		int offset = 0;
		for (int i = 0; i < filters.Length; i++)
		{
			string objectName = filters[i].gameObject.name;
			if (objectName.Contains("LOD1") || objectName.Contains("LOD2")) continue;
			Vector3[] verts = filters[i].sharedMesh.vertices;
			int[] tris = filters[i].sharedMesh.triangles;
			Transform transform = filters[i].gameObject.transform;
			for (int j = 0; j < verts.Length; j++)
			{
				Vector3 position = verts[j];
				position = transform.TransformPoint(position);
				verts[j] = position;
			}
			for (int k = 0; k < tris.Length; k++)
			{
				tris[k] = tris[k] + offset;
			}
			vertices.AddRange(verts);
			triangles.AddRange(tris);
			offset = offset + verts.Length;
			yield return new WaitForEndOfFrame();
			Debug.Log("Processed: " + (System.Convert.ToSingle(i) / System.Convert.ToSingle(filters.Length) * 100.0f).ToString() + " percents.");
		}
		mesh.vertices = vertices.ToArray();
		mesh.triangles = triangles.ToArray();
		mesh.RecalculateNormals();
		filter.sharedMesh = mesh;
		renderer.material = new Material(Shader.Find("Standard"));
	}
}

******************************

// Is gameobject a prefab ?
bool IsPrefab(GameObject source)
{
	PrefabAssetType type = PrefabUtility.GetPrefabAssetType(source);
	return (type == PrefabAssetType.Regular || type == PrefabAssetType.Model || type == PrefabAssetType.Variant);
}

******************************

void SetFbxDefaultMaterialForModel(UnityEngine.Object target, Material material)
{
	string assetPath = AssetDatabase.GetAssetPath(target);
	ModelImporter modelImporter = AssetImporter.GetAtPath(assetPath) as ModelImporter;
	SerializedObject serializedObject = new SerializedObject(modelImporter);
	SerializedProperty materials = serializedObject.FindProperty("m_Materials");
	SerializedProperty externalObjects = serializedObject.FindProperty("m_ExternalObjects");
	for (int i = 0; i < materials.arraySize; i++)
	{
		SerializedProperty id = materials.GetArrayElementAtIndex(i);
		string name = id.FindPropertyRelative("name").stringValue;
		string type = id.FindPropertyRelative("type").stringValue;
		string assembly = id.FindPropertyRelative("assembly").stringValue;
		SerializedProperty materialProperty = null;
		for (int j = 0; j < externalObjects.arraySize; j++)
		{
			SerializedProperty serializedProperty = externalObjects.GetArrayElementAtIndex(j);
			string externalName = serializedProperty.FindPropertyRelative("first.name").stringValue;
			string externalType = serializedProperty.FindPropertyRelative("first.type").stringValue;
			if (externalType == type && externalName == name)
			{
				materialProperty = serializedProperty.FindPropertyRelative("second");
				break;
			}
		}
		if (materialProperty == null)
		{
			int index = externalObjects.arraySize++;
			SerializedProperty serializedProperty = externalObjects.GetArrayElementAtIndex(index);
			serializedProperty.FindPropertyRelative("first.name").stringValue = name;
			serializedProperty.FindPropertyRelative("first.type").stringValue = type;
			serializedProperty.FindPropertyRelative("first.assembly").stringValue = assembly;
			serializedProperty.FindPropertyRelative("second").objectReferenceValue = material;
		}
		else
		{
			materialProperty.objectReferenceValue = material;
		}
	}
	serializedObject.ApplyModifiedPropertiesWithoutUndo();
	modelImporter.SaveAndReimport();
}

******************************

// Get array elements values from private fields

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Reflection;
using System.Linq; 

public class Tree : System.Object
{
	public string Description = "";
}

public class Forest : MonoBehaviour
{
	private Tree[] _Trees;
	private static readonly int _Layer = 10;

	void Awake()
	{
		Tree apple = new Tree();
		apple.Description = "Apple Tree";
		Tree pear = new Tree();
		pear.Description = "Pear Tree";
		_Trees = new Tree[] {apple, pear};
	}
}

public class ArrayTest : MonoBehaviour
{
	System.Object GetField(Component component, string fieldName, BindingFlags bindingFlags)
	{
		return component.GetType().GetField(fieldName, bindingFlags).GetValue(component);
	}

	System.Object GetStaticField(Type type, string fieldName, BindingFlags bindingFlags)
	{
		return type.GetField(fieldName, bindingFlags).GetValue(null);
	}

	void Start()
	{
		Component component = this.gameObject.AddComponent<Forest>();
		Type type = Type.GetType("Forest,Assembly-CSharp");
		Array array = (Array)GetField(component, "_Trees", BindingFlags.Instance | BindingFlags.NonPublic);
		for (int i = 0; i < array.Length; i++)
		{
			System.Object element = array.GetValue(i);
			Debug.Log(element.GetType().GetField("Description").GetValue(element));
		}
		Debug.Log((int)GetStaticField(type, "_Layer", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Static));
	}
}

******************************

// Get current terrain at the given position defined in world space (vec3).

Terrain GetCurrentTerrain (Terrain[] terrains, Vector3 vec3)
{
	for (int i = 0; i < terrains.Length; i++)
	{
		Terrain terrain = terrains[i];
		Vector3 p = terrain.transform.position;
		Vector3 s = terrain.terrainData.size;
		if (vec3.x > p.x && vec3.x < (p.x + s.x) && vec3.z > p.z && vec3.z < (p.z + s.z)) return terrain;
	}
	return null;
}

******************************

// Returns an array of all components of Type type (visible in hierarchy, both active and inactive) from all loaded scenes.

public static T[] FindComponentsOfType<T>() where T : Object
{
	List<T> results = new List<T>();
	Object[] objects = Resources.FindObjectsOfTypeAll(typeof(T));
	for (int i = 0; i < objects.Length; i++)
	{
		T typedObject = (T)objects[i];
		Component component = typedObject as Component;
		if (component != null)
		{
			if (component.gameObject.hideFlags == HideFlags.None)
				results.Add(typedObject);
		}
	}
	return results.ToArray();
}

******************************

void ClearRenderTexture3D (RenderTexture renderTexture)
{
	RenderTexture current = RenderTexture.active;
	RenderTexture.active = renderTexture;
	Graphics.SetRenderTarget(renderTexture, 0, CubemapFace.Unknown, -1);
	GL.Clear(true, true, Color.clear);
	Graphics.SetRenderTarget(current, 0, CubemapFace.Unknown, -1);
}

******************************

// Steam P2P

using UnityEngine;
using Steamworks;

public class SteamNetwork
{
    public CSteamID Sender;

    private Callback<P2PSessionRequest_t> _P2PSessionRequest;

    public void Init()
    {
        _P2PSessionRequest = Callback<P2PSessionRequest_t>.Create(OnP2PSessionRequest);
    }

    public void Release()
    {
        if (_P2PSessionRequest != null)
        {
            _P2PSessionRequest.Dispose();
        }
    }

    public void SendData(CSteamID receiver, byte[] bytes) // maximum size of byte array is 1 megabyte
    {
        SteamNetworking.SendP2PPacket(receiver, bytes, (uint)bytes.Length, EP2PSend.k_EP2PSendReliable);
    }

    public byte[] ReceiveData()
    {
        if (SteamNetworking.IsP2PPacketAvailable(out uint size))
        {
            byte[] bytes = new byte[size];
            SteamNetworking.ReadP2PPacket(bytes, size, out uint bytesRead, out CSteamID remoteId);
            return bytes;
        }
        else
        {
            return new byte[0];
        }
    }

    void OnP2PSessionRequest(P2PSessionRequest_t request)
    {
        CSteamID clientId = request.m_steamIDRemote;
        if (clientId == Sender)
        {
            Debug.Log("Request received: " + clientId);
            SteamNetworking.AcceptP2PSessionWithUser(clientId);
        }
        else
        {
            Debug.LogWarning("Unexpected session request from " + clientId);
        }
    }

    public byte[][] ArraySplit(byte[] inputArray, int segmentSize)
    {
        if ((inputArray == null) || (segmentSize <= 0)) return new byte[0][];
        int numSegments = (int)System.Math.Ceiling((double)inputArray.Length / segmentSize);
        byte[][] result = new byte[numSegments][];
        for (int i = 0; i < numSegments; i++)
        {
            int segmentLength = System.Math.Min(segmentSize, inputArray.Length - i * segmentSize);
            byte[] segment = new byte[segmentLength];
            System.Array.Copy(inputArray, i * segmentSize, segment, 0, segmentLength);
            result[i] = segment;
        }
        return result;
    }

    public byte[] ArrayConcat(params byte[][] arrays)
    {
        int size = 0;
        for (int i = 0; i < arrays.Length; i++)
        {
            size += arrays[i].Length;
        }
        byte[] array = new byte[size];
        int index = 0;
        for (int x = 0; x < arrays.Length; x++)
        {
            arrays[x].CopyTo(array, index);
            index += arrays[x].Length;
        }
        return array;
    }
}

// Test:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Steamworks;

public class SteamNetworkTest : MonoBehaviour
{
    public CSteamID Sender;
    public CSteamID Receiver;

    SteamNetwork _SteamNetwork;
    string _Text = "";
    string _Output = "";

    void Start()
    {
        _SteamNetwork = new SteamNetwork();
        _SteamNetwork.Sender = Sender;
        _SteamNetwork.Init();
    }

    void OnGUI()
    {
        _Text = GUI.TextField(new Rect(10, 10, 300, 20), _Text, 256);
        GUI.Label(new Rect(10, 100, 600, 100), _Output);
        if (GUI.Button(new Rect(400, 10, 150, 30), "Send message"))
        {
            _SteamNetwork.SendData(Receiver, System.Text.Encoding.ASCII.GetBytes(_Text));
            _Output = _Output + _Text + System.Environment.NewLine;
        }
        if (GUI.Button(new Rect(600, 10, 150, 30), "Receive message"))
        {
            byte[] bytes = _SteamNetwork.ReceiveData();
            _Output = _Output + System.Text.Encoding.ASCII.GetString(bytes) + System.Environment.NewLine;
        }
    }

    void OnDestroy()
    {
        _SteamNetwork.Release();
    }
}

******************************

